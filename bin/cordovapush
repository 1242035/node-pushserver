#!/usr/bin/env node

var cordovapush = require('../lib'),
    fs = require('fs'),
    path = require('path'),
    commander = require('commander'),
    pkg = require('../package.json'),
    under = require('underscore'),
    wrench = require('wrench'),
    config = {};


var trim = function (string) {
    return string.replace(/^\s+/g,'').replace(/\s+$/g,'');
}

var read = function (pwd) {
    var json = fs.readFileSync(path.join(process.cwd(), pwd), 'utf-8');
    return trim(json);
}

commander
  .version(pkg.version)
  .option('new [server name]', 'Create a new server directory')
  .option('start', 'Start server from current directory')
  .parse(process.argv);

if (commander.new) {
    fs.mkdirSync(path.join(process.cwd(), commander.new));
    wrench.copyDirSyncRecursive(__dirname + '/../resources', path.join(process.cwd(), commander.new) + '/resources'); 
    wrench.copyDirSyncRecursive(__dirname + '/../config', path.join(process.cwd(), commander.new) + '/config'); 
    wrench.copyDirSyncRecursive(__dirname + '/../public', path.join(process.cwd(), commander.new) + '/public'); 
    wrench.copyDirSyncRecursive(__dirname + '/../platforms', path.join(process.cwd(), commander.new) + '/platforms');   
} else if (commander.start) {
    config = {
        platforms : {},
        web : require(path.join(process.cwd(), '/config/web.json')),
        mongo : require(path.join(process.cwd(), '/config/mongo.json'))
    };
    var ls_platforms = fs.readdirSync(path.join(process.cwd(), '/config/platforms'));
    for (var index in ls_platforms) {
        if(ls_platforms.hasOwnProperty(index)){
            if(ls_platforms[index].split('.').pop() === "json") {
                config.platforms[under.initial(ls_platforms[index].split('.'))] = require(path.join(process.cwd(), '/config/platforms')+ '/' + ls_platforms[index]);
            }
        }
    }
    cordovapush.start(config, process.cwd());
} else {
    commander.outputHelp();
}